
UART_ReusableDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf2  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000527  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ee  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e0  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_13>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_14>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_13>:

// _VECTOR(Vector No.) ; And You get the Vector No. From The Datasheet || USART_RXC_VECT
// 14 in Datasheet means 13 
// Inside the Function We will write the Code of the Interrupt of RXC
ISR(USART_RXC_vect)		// _VECTOR(13)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	// UART0 has a Pointer to Function Member 
	// Call The Pointed Function from that Pointer
	// Notice : The User Determines Which Function The Pointer Points At.
	
	if (UART0.RXC_InterruptCall != NULL_PTR)
  9e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
  a2:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
  a6:	30 97       	sbiw	r30, 0x00	; 0
  a8:	09 f0       	breq	.+2      	; 0xac <__vector_13+0x30>
	{
		UART0.RXC_InterruptCall();
  aa:	09 95       	icall
	}
	else								// In case of the User doesn't Determine The Function Pointed At.
	{
		// Handle Error Using Error Handling Function
	}
}
  ac:	ff 91       	pop	r31
  ae:	ef 91       	pop	r30
  b0:	bf 91       	pop	r27
  b2:	af 91       	pop	r26
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	7f 91       	pop	r23
  ba:	6f 91       	pop	r22
  bc:	5f 91       	pop	r21
  be:	4f 91       	pop	r20
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_15>:

// TXC Interrupt Service Routine
ISR(USART_TXC_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	if (UART0.TXC_InterruptCall != NULL_PTR)
  f0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  f4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  f8:	30 97       	sbiw	r30, 0x00	; 0
  fa:	09 f0       	breq	.+2      	; 0xfe <__vector_15+0x30>
	{
		UART0.TXC_InterruptCall();
  fc:	09 95       	icall
	}
	else
	{
		// Handle Error Using Error Handling Function
	}
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_14>:

// UDRE Interrupt Service Routine
ISR(USART_UDRE_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	if (UART0.UDRE_InterruptCall != NULL_PTR)
 142:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 146:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	09 f0       	breq	.+2      	; 0x150 <__vector_14+0x30>
	{
		UART0.UDRE_InterruptCall();
 14e:	09 95       	icall
	}
	else
	{
		// Handle Error Using Error Handling Function
	}
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <main>:
#include <avr/io.h>
#include "ATmega32A_UART.h"

int main(void)
{
	UART0.BaudRate = 9600;
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	95 e2       	ldi	r25, 0x25	; 37
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 17e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 182:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 186:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x18>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
