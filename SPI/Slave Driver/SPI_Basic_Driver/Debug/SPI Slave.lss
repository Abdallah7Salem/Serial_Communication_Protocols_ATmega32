
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  0000086c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6c  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bb  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000896  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051e  00000000  00000000  00002ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_14>
  3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_15>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	8c 01       	movw	r16, r24
  56:	8e 01       	movw	r16, r28
  58:	90 01       	movw	r18, r0
  5a:	92 01       	movw	r18, r4
  5c:	94 01       	movw	r18, r8
  5e:	96 01       	movw	r18, r12
  60:	98 01       	movw	r18, r16

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a2 37       	cpi	r26, 0x72	; 114
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#include "util/delay.h"


int main(void)
{
	UART0.EnableMode = USART_Tx_Rx;
  8a:	e0 e6       	ldi	r30, 0x60	; 96
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	80 83       	st	Z, r24
	UART0.BaudRate = 9600;
  92:	40 e8       	ldi	r20, 0x80	; 128
  94:	55 e2       	ldi	r21, 0x25	; 37
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	47 83       	std	Z+7, r20	; 0x07
  9c:	50 87       	std	Z+8, r21	; 0x08
  9e:	61 87       	std	Z+9, r22	; 0x09
  a0:	72 87       	std	Z+10, r23	; 0x0a
	UART0.CommunicationMode = USART_Async_DoubleSpeed;
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	91 83       	std	Z+1, r25	; 0x01
	UART0.Control_Frame = USART_ParityDisable_1Stop;
  a6:	15 82       	std	Z+5, r1	; 0x05
	UART0.DataFrame = USART_8bitData;
  a8:	84 83       	std	Z+4, r24	; 0x04
	UART0.InterruptSource = USART_InterruptDisable;
  aa:	13 82       	std	Z+3, r1	; 0x03
	UART0.CommunicationTerminal = USART_SingleProcessor;
  ac:	12 82       	std	Z+2, r1	; 0x02

	SPI_Initiate();	
  ae:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Initiate>
	USART_Init();
  b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <USART_Init>
    while (1) 
    {
		unsigned char Data = 0;
		Data = SPI_ReadByte();
  b6:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_ReadByte>
		USART_SendByte_Blocking(Data);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <USART_SendByte_Blocking>
  c0:	fa cf       	rjmp	.-12     	; 0xb6 <main+0x2c>

000000c2 <SPI_Initiate>:

void SPI_SendByte(unsigned char Data)
{
	SPDR = Data;
	while((SPSR & (1 << SPIF)) == 0) {}
}
  c2:	8d b1       	in	r24, 0x0d	; 13
  c4:	80 65       	ori	r24, 0x50	; 80
  c6:	8d b9       	out	0x0d, r24	; 13
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	87 bb       	out	0x17, r24	; 23
  ce:	08 95       	ret

000000d0 <SPI_ReadByte>:

unsigned char SPI_ReadByte(void)
{
	unsigned char Dummy = 0x00;
	SPDR = Dummy;
  d0:	1f b8       	out	0x0f, r1	; 15
	while((SPSR & (1 << SPIF)) == 0) {}
  d2:	77 9b       	sbis	0x0e, 7	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <SPI_ReadByte+0x2>
	return SPDR;
  d6:	8f b1       	in	r24, 0x0f	; 15
}
  d8:	08 95       	ret

000000da <__vector_13>:

// _VECTOR(Vector No.) ; And You get the Vector No. From The Datasheet || USART_RXC_VECT
// 14 in Datasheet means 13 
// Inside the Function We will write the Code of the Interrupt of RXC
ISR(USART_RXC_vect)		// _VECTOR(13)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	// UART0 has a Pointer to Function Member 
	// Call The Pointed Function from that Pointer
	// Notice : The User Determines Which Function The Pointer Points At.
	
	if (UART0.RXC_InterruptCall != NULL_PTR)
  fc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 100:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 104:	30 97       	sbiw	r30, 0x00	; 0
 106:	09 f0       	breq	.+2      	; 0x10a <__vector_13+0x30>
	{
		UART0.RXC_InterruptCall();
 108:	09 95       	icall
	}
	else								// In case of the User doesn't Determine The Function Pointed At.
	{
		// Handle Error Using Error Handling Function
	}
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_15>:

// TXC Interrupt Service Routine
ISR(USART_TXC_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	if (UART0.TXC_InterruptCall != NULL_PTR)
 14e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 152:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 156:	30 97       	sbiw	r30, 0x00	; 0
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_15+0x30>
	{
		UART0.TXC_InterruptCall();
 15a:	09 95       	icall
	}
	else
	{
		// Handle Error Using Error Handling Function
	}
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_14>:

// UDRE Interrupt Service Routine
ISR(USART_UDRE_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	if (UART0.UDRE_InterruptCall != NULL_PTR)
 1a0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 1a4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
 1a8:	30 97       	sbiw	r30, 0x00	; 0
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_14+0x30>
	{
		UART0.UDRE_InterruptCall();
 1ac:	09 95       	icall
	}
	else
	{
		// Handle Error Using Error Handling Function
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <USART_Init>:
 * @Param[in]			-None
 * @retval				-None
 * @Note				-None
 */
void USART_Init (void)
{
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	// This Variable Is Used To Put The Value Of The BaudRate 
	float UBRR_Temp = 0;
	
	
	/* ======= Switch On Enable Mode For The USART ======= */
	switch (UART0.EnableMode)
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	51 f0       	breq	.+20     	; 0x1fc <USART_Init+0x2c>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <USART_Init+0x28>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <USART_Init+0x24>
void USART_Init (void)
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
	unsigned char UCSRB_Temp = 0;
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <USART_Init+0x2e>
			break;
		case USART_Rx_Only:
			UCSRB_Temp |= (1 << RXEN);									// Enable Receive Only On The USART
			break;
		case USART_Tx_Only:
			UCSRB_Temp |= (1 << TXEN);									// Enable Transmission Only On The USART
 1f4:	d8 e0       	ldi	r29, 0x08	; 8
			break;
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <USART_Init+0x2e>
		case USART_Tx_Rx:
			UCSRB_Temp |= (1 << RXEN) | (1 << TXEN);						// Enable Both Transmission And Receive On The USART
 1f8:	d8 e1       	ldi	r29, 0x18	; 24
			break;
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <USART_Init+0x2e>
	{
		case USART_Disable:
			// Do Nothing / We Are Resetting UCSRB_Temp = 0
			break;
		case USART_Rx_Only:
			UCSRB_Temp |= (1 << RXEN);									// Enable Receive Only On The USART
 1fc:	d0 e1       	ldi	r29, 0x10	; 16
		default:
			break;
	}
	
	/* ====== Switch On The Communication Mode For The USART ======== */
	switch (UART0.CommunicationMode)
 1fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	41 f1       	breq	.+80     	; 0x256 <USART_Init+0x86>
 206:	20 f0       	brcs	.+8      	; 0x210 <USART_Init+0x40>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	09 f4       	brne	.+2      	; 0x20e <USART_Init+0x3e>
 20c:	47 c0       	rjmp	.+142    	; 0x29c <USART_Init+0xcc>
 20e:	6a c0       	rjmp	.+212    	; 0x2e4 <USART_Init+0x114>
	{
		case USART_Async_NormalSpeed:
			UBRR_Temp = (((float)F_CPU) / (16.0 * UART0.BaudRate)) - 0.5;		// -1 + 0.5 = -0.5 : as the register accepts only int values 
 210:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 214:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 218:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 21c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 220:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatunsisf>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e8       	ldi	r20, 0x80	; 128
 22a:	51 e4       	ldi	r21, 0x41	; 65
 22c:	0e 94 87 03 	call	0x70e	; 0x70e <__mulsf3>
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	74 e2       	ldi	r23, 0x24	; 36
 238:	84 e7       	ldi	r24, 0x74	; 116
 23a:	99 e4       	ldi	r25, 0x49	; 73
 23c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__subsf3>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
	unsigned char UCSRB_Temp = 0;
	unsigned char UCSRC_Temp = 0;
 250:	c0 e0       	ldi	r28, 0x00	; 0
 */
void USART_Init (void)
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
 252:	10 e0       	ldi	r17, 0x00	; 0
	{
		case USART_Async_NormalSpeed:
			UBRR_Temp = (((float)F_CPU) / (16.0 * UART0.BaudRate)) - 0.5;		// -1 + 0.5 = -0.5 : as the register accepts only int values 
																				// so it approximates for example 11.9 to 11 this is wrong
																				// we added +0.5 to make it approximate correctly .
			break;
 254:	4f c0       	rjmp	.+158    	; 0x2f4 <USART_Init+0x124>
		case USART_Async_DoubleSpeed:
			UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;		// In double speed : 8 instead of 16
 256:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 25a:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 25e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 262:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 266:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatunsisf>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	51 e4       	ldi	r21, 0x41	; 65
 272:	0e 94 87 03 	call	0x70e	; 0x70e <__mulsf3>
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	74 e2       	ldi	r23, 0x24	; 36
 27e:	84 e7       	ldi	r24, 0x74	; 116
 280:	99 e4       	ldi	r25, 0x49	; 73
 282:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	5f e3       	ldi	r21, 0x3F	; 63
 28e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__subsf3>
 292:	6b 01       	movw	r12, r22
 294:	7c 01       	movw	r14, r24
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
	unsigned char UCSRB_Temp = 0;
	unsigned char UCSRC_Temp = 0;
 296:	c0 e0       	ldi	r28, 0x00	; 0
																				// so it approximates for example 11.9 to 11 this is wrong
																				// we added +0.5 to make it approximate correctly .
			break;
		case USART_Async_DoubleSpeed:
			UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;		// In double speed : 8 instead of 16
			UCSRA_Temp |= (1 << U2X);
 298:	12 e0       	ldi	r17, 0x02	; 2
			break;
 29a:	2c c0       	rjmp	.+88     	; 0x2f4 <USART_Init+0x124>
		case USART_Sync:
			UCSRC_Temp |= (1 << UMSEL);
			UBRR_Temp = (((float)F_CPU) / (2.0 * UART0.BaudRate)) - 0.5;
 29c:	00 e6       	ldi	r16, 0x60	; 96
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	f8 01       	movw	r30, r16
 2a2:	67 81       	ldd	r22, Z+7	; 0x07
 2a4:	70 85       	ldd	r23, Z+8	; 0x08
 2a6:	81 85       	ldd	r24, Z+9	; 0x09
 2a8:	92 85       	ldd	r25, Z+10	; 0x0a
 2aa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatunsisf>
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__addsf3>
 2b6:	9b 01       	movw	r18, r22
 2b8:	ac 01       	movw	r20, r24
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	74 e2       	ldi	r23, 0x24	; 36
 2be:	84 e7       	ldi	r24, 0x74	; 116
 2c0:	99 e4       	ldi	r25, 0x49	; 73
 2c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__subsf3>
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
			
			/* ====== Switch On Clock Polarity In Synchronous Mode ====== */
			switch (UART0.ClockPolarity)
 2d6:	f8 01       	movw	r30, r16
 2d8:	86 81       	ldd	r24, Z+6	; 0x06
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	49 f0       	breq	.+18     	; 0x2f0 <USART_Init+0x120>
		case USART_Async_DoubleSpeed:
			UBRR_Temp = (((float)F_CPU) / (8.0 * UART0.BaudRate)) - 0.5;		// In double speed : 8 instead of 16
			UCSRA_Temp |= (1 << U2X);
			break;
		case USART_Sync:
			UCSRC_Temp |= (1 << UMSEL);
 2de:	c0 e4       	ldi	r28, 0x40	; 64
 */
void USART_Init (void)
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <USART_Init+0x124>
	unsigned char UCSRB_Temp = 0;
	unsigned char UCSRC_Temp = 0;
	
	// This Variable Is Used To Put The Value Of The BaudRate 
	float UBRR_Temp = 0;
 2e4:	c1 2c       	mov	r12, r1
 2e6:	d1 2c       	mov	r13, r1
 2e8:	76 01       	movw	r14, r12
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
	unsigned char UCSRB_Temp = 0;
	unsigned char UCSRC_Temp = 0;
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 */
void USART_Init (void)
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <USART_Init+0x124>
			switch (UART0.ClockPolarity)
			{
				case USART_SampleOnFalling:
					break;
				case USART_SampleOnRising:
					UCSRC_Temp |= (1<<UCPOL);
 2f0:	c1 e4       	ldi	r28, 0x41	; 65
 */
void USART_Init (void)
{
	// These Variable Are Used To Put Values In Registers 
	// They Are Used Only In USART_Init Function
	unsigned char UCSRA_Temp = 0;
 2f2:	10 e0       	ldi	r17, 0x00	; 0
		default:
			break;
	}
	
	/* ===== Switch On The Communication Terminal For The USART ======= */
	switch(UART0.CommunicationTerminal)
 2f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <USART_Init+0x12e>
	{
		case USART_SingleProcessor:
			break;
		case USART_MultiProcessor:
			UCSRA_Temp |= (1 << MPCM);
 2fc:	11 60       	ori	r17, 0x01	; 1
		default:
			break;
	}
	
	/* ===== Switch On The Interrupt Sources For The USART ======== */
	switch (UART0.InterruptSource)
 2fe:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 302:	8e 2f       	mov	r24, r30
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	e7 30       	cpi	r30, 0x07	; 7
 30c:	f1 05       	cpc	r31, r1
 30e:	88 f4       	brcc	.+34     	; 0x332 <USART_Init+0x162>
 310:	e6 5d       	subi	r30, 0xD6	; 214
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__tablejump2__>
	{
		case USART_InterruptDisable:											// Disable USART Interrupt
			break;
		case USART_RxComplete_Enable:											// Enable Receive Complete Interrupt 
			UCSRB_Temp |= (1 << RXCIE);
 318:	d0 68       	ori	r29, 0x80	; 128
			break;
 31a:	0b c0       	rjmp	.+22     	; 0x332 <USART_Init+0x162>
		case USART_TxComplete_Enable:											// Enable Transmit Complete Interrupt
			UCSRB_Temp |= (1 << TXCIE);
 31c:	d0 64       	ori	r29, 0x40	; 64
			break;
 31e:	09 c0       	rjmp	.+18     	; 0x332 <USART_Init+0x162>
		case USART_UDREmpty_Enable:												// Enable UDR Empty Interrupt
			UCSRB_Temp |= (1 << UDRIE);
 320:	d0 62       	ori	r29, 0x20	; 32
			break;
 322:	07 c0       	rjmp	.+14     	; 0x332 <USART_Init+0x162>
		case USART_RxComplete_TxComplete_Enable:								// Enable Both Transmit/Receive Interrupts
			UCSRB_Temp |= (1 << RXCIE) | (1 << TXCIE);
 324:	d0 6c       	ori	r29, 0xC0	; 192
			break;
 326:	05 c0       	rjmp	.+10     	; 0x332 <USART_Init+0x162>
		case USART_RxComplete_UDREmpty_Enable:									// Enable Both Receive Complete & UDR Empty Interrupts
			UCSRB_Temp |= (1 << UDRIE) | (1 << RXCIE);
 328:	d0 6a       	ori	r29, 0xA0	; 160
			break;
 32a:	03 c0       	rjmp	.+6      	; 0x332 <USART_Init+0x162>
		case USART_TxComplete_UDREmpty_Enable:									// Enable Transmit Complete & UDR Empty Interrupts
			UCSRB_Temp |= (1 << TXCIE) | (1 << UDRIE);
 32c:	d0 66       	ori	r29, 0x60	; 96
			break;
 32e:	01 c0       	rjmp	.+2      	; 0x332 <USART_Init+0x162>
		case USART_RxComplete_TxComplete_UDREmpty:								// Enable Receive Complete & UDR Empty Interrupts
			UCSRB_Temp |= (1 << RXCIE) | (1 << TXCIE) | (1 << UDRIE);
 330:	d0 6e       	ori	r29, 0xE0	; 224
		default:
			break;
	}
	
	/* ===== Switch On The Data Frame For The USART ======== */
	switch(UART0.DataFrame)
 332:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	59 f0       	breq	.+22     	; 0x350 <USART_Init+0x180>
 33a:	18 f4       	brcc	.+6      	; 0x342 <USART_Init+0x172>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	31 f0       	breq	.+12     	; 0x34c <USART_Init+0x17c>
 340:	0d c0       	rjmp	.+26     	; 0x35c <USART_Init+0x18c>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	39 f0       	breq	.+14     	; 0x354 <USART_Init+0x184>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	39 f0       	breq	.+14     	; 0x358 <USART_Init+0x188>
 34a:	08 c0       	rjmp	.+16     	; 0x35c <USART_Init+0x18c>
	{
		case USART_5bitData:													// Enable 5 bit Data Frame For USART
			break;
		case USART_6bitData:													// Enable 6 bit Data Frame For USART
			UCSRC_Temp |= (1<<UCSZ0);
 34c:	c2 60       	ori	r28, 0x02	; 2
			break;
 34e:	06 c0       	rjmp	.+12     	; 0x35c <USART_Init+0x18c>
		case USART_7bitData:													// Enable 7 bit Data Frame For USART
			UCSRC_Temp |= (1<<UCSZ1);
 350:	c4 60       	ori	r28, 0x04	; 4
			break;
 352:	04 c0       	rjmp	.+8      	; 0x35c <USART_Init+0x18c>
		case USART_8bitData:													// Enable 8 bit Data Frame For USART
			UCSRC_Temp |= (1<<UCSZ0) | (1<<UCSZ1);
 354:	c6 60       	ori	r28, 0x06	; 6
			break;
 356:	02 c0       	rjmp	.+4      	; 0x35c <USART_Init+0x18c>
		case USART_9bitData:													// Enable 9 bit Data Frame For USART
			UCSRC_Temp |= (1<<UCSZ0) | (1<<UCSZ1);
 358:	c6 60       	ori	r28, 0x06	; 6
			UCSRB_Temp |= (1<<UCSZ2);
 35a:	d4 60       	ori	r29, 0x04	; 4
			break;
		
	}
	
	/* ===== Switch On The Control Frame For The USART ======== */
	switch(UART0.Control_Frame)
 35c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	79 f0       	breq	.+30     	; 0x382 <USART_Init+0x1b2>
 364:	28 f4       	brcc	.+10     	; 0x370 <USART_Init+0x1a0>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	41 f0       	breq	.+16     	; 0x37a <USART_Init+0x1aa>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	41 f0       	breq	.+16     	; 0x37e <USART_Init+0x1ae>
 36e:	0e c0       	rjmp	.+28     	; 0x38c <USART_Init+0x1bc>
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	49 f0       	breq	.+18     	; 0x386 <USART_Init+0x1b6>
 374:	85 30       	cpi	r24, 0x05	; 5
 376:	49 f0       	breq	.+18     	; 0x38a <USART_Init+0x1ba>
 378:	09 c0       	rjmp	.+18     	; 0x38c <USART_Init+0x1bc>
	{
		case USART_ParityDisable_1Stop:
			break;
		case USART_ParityDisable_2Stop:
			UCSRC_Temp |= (1<<USBS);
 37a:	c8 60       	ori	r28, 0x08	; 8
			break;
 37c:	07 c0       	rjmp	.+14     	; 0x38c <USART_Init+0x1bc>
		case USART_ParityEven_1Stop:
			UCSRC_Temp |= (1<<UPM1);
 37e:	c0 62       	ori	r28, 0x20	; 32
			break;
 380:	05 c0       	rjmp	.+10     	; 0x38c <USART_Init+0x1bc>
		case USART_ParityEven_2Stop:
			UCSRC_Temp |= (1<<USBS) | (1<<UPM1);
 382:	c8 62       	ori	r28, 0x28	; 40
			break;
 384:	03 c0       	rjmp	.+6      	; 0x38c <USART_Init+0x1bc>
		case USART_ParityOdd_1Stop:
			UCSRC_Temp |= (1<<UPM0) | (1<<UPM1);
 386:	c0 63       	ori	r28, 0x30	; 48
			break;
 388:	01 c0       	rjmp	.+2      	; 0x38c <USART_Init+0x1bc>
		case USART_ParityOdd_2Stop:
			UCSRC_Temp |= (1<<USBS) | (1<<UPM0) | (1<<UPM1) ;
 38a:	c8 63       	ori	r28, 0x38	; 56
			break;
			
	}
	
	// Putting Values Of Variables Defined Above In Their Registers
	UBRRH = ((unsigned short)UBRR_Temp)>>8;
 38c:	c7 01       	movw	r24, r14
 38e:	b6 01       	movw	r22, r12
 390:	0e 94 ca 02 	call	0x594	; 0x594 <__fixunssfsi>
 394:	70 bd       	out	0x20, r23	; 32
	UBRRL = ((unsigned char)UBRR_Temp);
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0e 94 ca 02 	call	0x594	; 0x594 <__fixunssfsi>
 39e:	69 b9       	out	0x09, r22	; 9
	UCSRA = UCSRA_Temp;
 3a0:	1b b9       	out	0x0b, r17	; 11
	UCSRC = UCSRC_Temp;
 3a2:	c0 bd       	out	0x20, r28	; 32
	UCSRB = UCSRB_Temp;												// USART works on the Transmit and Receive Registers in UCSRB Register
 3a4:	da b9       	out	0x0a, r29	; 10
	
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	08 95       	ret

000003b8 <USART_SendByte_Blocking>:
 */
void USART_SendByte_Blocking(unsigned short Data)					   	   // unsigned short (16-bit) : as data can be 9-bit frame
{
	// Wait for the register to be empty
	// If it is empty --> Put Data in UDR
	while ((UCSRA & (1<<UDRE)) == 0 )
 3b8:	5d 9b       	sbis	0x0b, 5	; 11
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <USART_SendByte_Blocking>
	{
		// Do nothing till the register become empty
	}
	
	if (UART0.DataFrame == USART_9bitData)
 3bc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 3c0:	24 30       	cpi	r18, 0x04	; 4
 3c2:	39 f4       	brne	.+14     	; 0x3d2 <USART_SendByte_Blocking+0x1a>
	{
		// Put the 9th bit first then put the 8-bits together
		// (UCSRB & 0xFE) : Reset Bit0 in the register
		UCSRB = (UCSRB & 0xFE) | ((Data & (1<<8)) >> 8);										// 1 0000 0000 >> 8
 3c4:	2a b1       	in	r18, 0x0a	; 10
 3c6:	2e 7f       	andi	r18, 0xFE	; 254
 3c8:	ac 01       	movw	r20, r24
 3ca:	44 27       	eor	r20, r20
 3cc:	51 70       	andi	r21, 0x01	; 1
 3ce:	25 2b       	or	r18, r21
 3d0:	2a b9       	out	0x0a, r18	; 10
		 *		1 0000 0000 >> 8		=	0 0000 0001 = 0000 00001
		 */
	}
	
	// Send the remaining / main 8 bit data
	UDR = (unsigned char) Data;									// Data parameter is 16-bit, so we cast it into 8-bit as we need only 8-bits 
 3d2:	8c b9       	out	0x0c, r24	; 12
 3d4:	08 95       	ret

000003d6 <__subsf3>:
 3d6:	50 58       	subi	r21, 0x80	; 128

000003d8 <__addsf3>:
 3d8:	bb 27       	eor	r27, r27
 3da:	aa 27       	eor	r26, r26
 3dc:	0e 94 03 02 	call	0x406	; 0x406 <__addsf3x>
 3e0:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_round>
 3e4:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_pscA>
 3e8:	38 f0       	brcs	.+14     	; 0x3f8 <__addsf3+0x20>
 3ea:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_pscB>
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__addsf3+0x20>
 3f0:	39 f4       	brne	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f2:	9f 3f       	cpi	r25, 0xFF	; 255
 3f4:	19 f4       	brne	.+6      	; 0x3fc <__addsf3+0x24>
 3f6:	26 f4       	brtc	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f8:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_nan>
 3fc:	0e f4       	brtc	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	e0 95       	com	r30
 400:	e7 fb       	bst	r30, 7
 402:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>

00000406 <__addsf3x>:
 406:	e9 2f       	mov	r30, r25
 408:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_split3>
 40c:	58 f3       	brcs	.-42     	; 0x3e4 <__addsf3+0xc>
 40e:	ba 17       	cp	r27, r26
 410:	62 07       	cpc	r22, r18
 412:	73 07       	cpc	r23, r19
 414:	84 07       	cpc	r24, r20
 416:	95 07       	cpc	r25, r21
 418:	20 f0       	brcs	.+8      	; 0x422 <__addsf3x+0x1c>
 41a:	79 f4       	brne	.+30     	; 0x43a <__addsf3x+0x34>
 41c:	a6 f5       	brtc	.+104    	; 0x486 <__addsf3x+0x80>
 41e:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_zero>
 422:	0e f4       	brtc	.+2      	; 0x426 <__addsf3x+0x20>
 424:	e0 95       	com	r30
 426:	0b 2e       	mov	r0, r27
 428:	ba 2f       	mov	r27, r26
 42a:	a0 2d       	mov	r26, r0
 42c:	0b 01       	movw	r0, r22
 42e:	b9 01       	movw	r22, r18
 430:	90 01       	movw	r18, r0
 432:	0c 01       	movw	r0, r24
 434:	ca 01       	movw	r24, r20
 436:	a0 01       	movw	r20, r0
 438:	11 24       	eor	r1, r1
 43a:	ff 27       	eor	r31, r31
 43c:	59 1b       	sub	r21, r25
 43e:	99 f0       	breq	.+38     	; 0x466 <__addsf3x+0x60>
 440:	59 3f       	cpi	r21, 0xF9	; 249
 442:	50 f4       	brcc	.+20     	; 0x458 <__addsf3x+0x52>
 444:	50 3e       	cpi	r21, 0xE0	; 224
 446:	68 f1       	brcs	.+90     	; 0x4a2 <__addsf3x+0x9c>
 448:	1a 16       	cp	r1, r26
 44a:	f0 40       	sbci	r31, 0x00	; 0
 44c:	a2 2f       	mov	r26, r18
 44e:	23 2f       	mov	r18, r19
 450:	34 2f       	mov	r19, r20
 452:	44 27       	eor	r20, r20
 454:	58 5f       	subi	r21, 0xF8	; 248
 456:	f3 cf       	rjmp	.-26     	; 0x43e <__addsf3x+0x38>
 458:	46 95       	lsr	r20
 45a:	37 95       	ror	r19
 45c:	27 95       	ror	r18
 45e:	a7 95       	ror	r26
 460:	f0 40       	sbci	r31, 0x00	; 0
 462:	53 95       	inc	r21
 464:	c9 f7       	brne	.-14     	; 0x458 <__addsf3x+0x52>
 466:	7e f4       	brtc	.+30     	; 0x486 <__addsf3x+0x80>
 468:	1f 16       	cp	r1, r31
 46a:	ba 0b       	sbc	r27, r26
 46c:	62 0b       	sbc	r22, r18
 46e:	73 0b       	sbc	r23, r19
 470:	84 0b       	sbc	r24, r20
 472:	ba f0       	brmi	.+46     	; 0x4a2 <__addsf3x+0x9c>
 474:	91 50       	subi	r25, 0x01	; 1
 476:	a1 f0       	breq	.+40     	; 0x4a0 <__addsf3x+0x9a>
 478:	ff 0f       	add	r31, r31
 47a:	bb 1f       	adc	r27, r27
 47c:	66 1f       	adc	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	c2 f7       	brpl	.-16     	; 0x474 <__addsf3x+0x6e>
 484:	0e c0       	rjmp	.+28     	; 0x4a2 <__addsf3x+0x9c>
 486:	ba 0f       	add	r27, r26
 488:	62 1f       	adc	r22, r18
 48a:	73 1f       	adc	r23, r19
 48c:	84 1f       	adc	r24, r20
 48e:	48 f4       	brcc	.+18     	; 0x4a2 <__addsf3x+0x9c>
 490:	87 95       	ror	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b7 95       	ror	r27
 498:	f7 95       	ror	r31
 49a:	9e 3f       	cpi	r25, 0xFE	; 254
 49c:	08 f0       	brcs	.+2      	; 0x4a0 <__addsf3x+0x9a>
 49e:	b0 cf       	rjmp	.-160    	; 0x400 <__EEPROM_REGION_LENGTH__>
 4a0:	93 95       	inc	r25
 4a2:	88 0f       	add	r24, r24
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__addsf3x+0xa2>
 4a6:	99 27       	eor	r25, r25
 4a8:	ee 0f       	add	r30, r30
 4aa:	97 95       	ror	r25
 4ac:	87 95       	ror	r24
 4ae:	08 95       	ret

000004b0 <__divsf3>:
 4b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__divsf3x>
 4b4:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_round>
 4b8:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_pscB>
 4bc:	58 f0       	brcs	.+22     	; 0x4d4 <__divsf3+0x24>
 4be:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_pscA>
 4c2:	40 f0       	brcs	.+16     	; 0x4d4 <__divsf3+0x24>
 4c4:	29 f4       	brne	.+10     	; 0x4d0 <__divsf3+0x20>
 4c6:	5f 3f       	cpi	r21, 0xFF	; 255
 4c8:	29 f0       	breq	.+10     	; 0x4d4 <__divsf3+0x24>
 4ca:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 4ce:	51 11       	cpse	r21, r1
 4d0:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 4d4:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_nan>

000004d8 <__divsf3x>:
 4d8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_split3>
 4dc:	68 f3       	brcs	.-38     	; 0x4b8 <__divsf3+0x8>

000004de <__divsf3_pse>:
 4de:	99 23       	and	r25, r25
 4e0:	b1 f3       	breq	.-20     	; 0x4ce <__divsf3+0x1e>
 4e2:	55 23       	and	r21, r21
 4e4:	91 f3       	breq	.-28     	; 0x4ca <__divsf3+0x1a>
 4e6:	95 1b       	sub	r25, r21
 4e8:	55 0b       	sbc	r21, r21
 4ea:	bb 27       	eor	r27, r27
 4ec:	aa 27       	eor	r26, r26
 4ee:	62 17       	cp	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	84 07       	cpc	r24, r20
 4f4:	38 f0       	brcs	.+14     	; 0x504 <__divsf3_pse+0x26>
 4f6:	9f 5f       	subi	r25, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	44 1f       	adc	r20, r20
 500:	aa 1f       	adc	r26, r26
 502:	a9 f3       	breq	.-22     	; 0x4ee <__divsf3_pse+0x10>
 504:	35 d0       	rcall	.+106    	; 0x570 <__divsf3_pse+0x92>
 506:	0e 2e       	mov	r0, r30
 508:	3a f0       	brmi	.+14     	; 0x518 <__divsf3_pse+0x3a>
 50a:	e0 e8       	ldi	r30, 0x80	; 128
 50c:	32 d0       	rcall	.+100    	; 0x572 <__divsf3_pse+0x94>
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	e6 95       	lsr	r30
 514:	00 1c       	adc	r0, r0
 516:	ca f7       	brpl	.-14     	; 0x50a <__divsf3_pse+0x2c>
 518:	2b d0       	rcall	.+86     	; 0x570 <__divsf3_pse+0x92>
 51a:	fe 2f       	mov	r31, r30
 51c:	29 d0       	rcall	.+82     	; 0x570 <__divsf3_pse+0x92>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	bb 1f       	adc	r27, r27
 526:	26 17       	cp	r18, r22
 528:	37 07       	cpc	r19, r23
 52a:	48 07       	cpc	r20, r24
 52c:	ab 07       	cpc	r26, r27
 52e:	b0 e8       	ldi	r27, 0x80	; 128
 530:	09 f0       	breq	.+2      	; 0x534 <__divsf3_pse+0x56>
 532:	bb 0b       	sbc	r27, r27
 534:	80 2d       	mov	r24, r0
 536:	bf 01       	movw	r22, r30
 538:	ff 27       	eor	r31, r31
 53a:	93 58       	subi	r25, 0x83	; 131
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	3a f0       	brmi	.+14     	; 0x54e <__divsf3_pse+0x70>
 540:	9e 3f       	cpi	r25, 0xFE	; 254
 542:	51 05       	cpc	r21, r1
 544:	78 f0       	brcs	.+30     	; 0x564 <__divsf3_pse+0x86>
 546:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 54a:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 54e:	5f 3f       	cpi	r21, 0xFF	; 255
 550:	e4 f3       	brlt	.-8      	; 0x54a <__divsf3_pse+0x6c>
 552:	98 3e       	cpi	r25, 0xE8	; 232
 554:	d4 f3       	brlt	.-12     	; 0x54a <__divsf3_pse+0x6c>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b7 95       	ror	r27
 55e:	f7 95       	ror	r31
 560:	9f 5f       	subi	r25, 0xFF	; 255
 562:	c9 f7       	brne	.-14     	; 0x556 <__divsf3_pse+0x78>
 564:	88 0f       	add	r24, r24
 566:	91 1d       	adc	r25, r1
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret
 570:	e1 e0       	ldi	r30, 0x01	; 1
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	bb 1f       	adc	r27, r27
 57a:	62 17       	cp	r22, r18
 57c:	73 07       	cpc	r23, r19
 57e:	84 07       	cpc	r24, r20
 580:	ba 07       	cpc	r27, r26
 582:	20 f0       	brcs	.+8      	; 0x58c <__divsf3_pse+0xae>
 584:	62 1b       	sub	r22, r18
 586:	73 0b       	sbc	r23, r19
 588:	84 0b       	sbc	r24, r20
 58a:	ba 0b       	sbc	r27, r26
 58c:	ee 1f       	adc	r30, r30
 58e:	88 f7       	brcc	.-30     	; 0x572 <__divsf3_pse+0x94>
 590:	e0 95       	com	r30
 592:	08 95       	ret

00000594 <__fixunssfsi>:
 594:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_splitA>
 598:	88 f0       	brcs	.+34     	; 0x5bc <__fixunssfsi+0x28>
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	98 f0       	brcs	.+38     	; 0x5c4 <__fixunssfsi+0x30>
 59e:	b9 2f       	mov	r27, r25
 5a0:	99 27       	eor	r25, r25
 5a2:	b7 51       	subi	r27, 0x17	; 23
 5a4:	b0 f0       	brcs	.+44     	; 0x5d2 <__fixunssfsi+0x3e>
 5a6:	e1 f0       	breq	.+56     	; 0x5e0 <__fixunssfsi+0x4c>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a f0       	brmi	.+6      	; 0x5b8 <__fixunssfsi+0x24>
 5b2:	ba 95       	dec	r27
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__fixunssfsi+0x14>
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__fixunssfsi+0x4c>
 5b8:	b1 30       	cpi	r27, 0x01	; 1
 5ba:	91 f0       	breq	.+36     	; 0x5e0 <__fixunssfsi+0x4c>
 5bc:	0e 94 80 03 	call	0x700	; 0x700 <__fp_zero>
 5c0:	b1 e0       	ldi	r27, 0x01	; 1
 5c2:	08 95       	ret
 5c4:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_zero>
 5c8:	67 2f       	mov	r22, r23
 5ca:	78 2f       	mov	r23, r24
 5cc:	88 27       	eor	r24, r24
 5ce:	b8 5f       	subi	r27, 0xF8	; 248
 5d0:	39 f0       	breq	.+14     	; 0x5e0 <__fixunssfsi+0x4c>
 5d2:	b9 3f       	cpi	r27, 0xF9	; 249
 5d4:	cc f3       	brlt	.-14     	; 0x5c8 <__fixunssfsi+0x34>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b3 95       	inc	r27
 5de:	d9 f7       	brne	.-10     	; 0x5d6 <__fixunssfsi+0x42>
 5e0:	3e f4       	brtc	.+14     	; 0x5f0 <__fixunssfsi+0x5c>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__floatunsisf>:
 5f2:	e8 94       	clt
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__floatsisf+0x12>

000005f6 <__floatsisf>:
 5f6:	97 fb       	bst	r25, 7
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__floatsisf+0x12>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	99 23       	and	r25, r25
 60a:	a9 f0       	breq	.+42     	; 0x636 <__floatsisf+0x40>
 60c:	f9 2f       	mov	r31, r25
 60e:	96 e9       	ldi	r25, 0x96	; 150
 610:	bb 27       	eor	r27, r27
 612:	93 95       	inc	r25
 614:	f6 95       	lsr	r31
 616:	87 95       	ror	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f1 11       	cpse	r31, r1
 620:	f8 cf       	rjmp	.-16     	; 0x612 <__floatsisf+0x1c>
 622:	fa f4       	brpl	.+62     	; 0x662 <__floatsisf+0x6c>
 624:	bb 0f       	add	r27, r27
 626:	11 f4       	brne	.+4      	; 0x62c <__floatsisf+0x36>
 628:	60 ff       	sbrs	r22, 0
 62a:	1b c0       	rjmp	.+54     	; 0x662 <__floatsisf+0x6c>
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	16 c0       	rjmp	.+44     	; 0x662 <__floatsisf+0x6c>
 636:	88 23       	and	r24, r24
 638:	11 f0       	breq	.+4      	; 0x63e <__floatsisf+0x48>
 63a:	96 e9       	ldi	r25, 0x96	; 150
 63c:	11 c0       	rjmp	.+34     	; 0x660 <__floatsisf+0x6a>
 63e:	77 23       	and	r23, r23
 640:	21 f0       	breq	.+8      	; 0x64a <__floatsisf+0x54>
 642:	9e e8       	ldi	r25, 0x8E	; 142
 644:	87 2f       	mov	r24, r23
 646:	76 2f       	mov	r23, r22
 648:	05 c0       	rjmp	.+10     	; 0x654 <__floatsisf+0x5e>
 64a:	66 23       	and	r22, r22
 64c:	71 f0       	breq	.+28     	; 0x66a <__floatsisf+0x74>
 64e:	96 e8       	ldi	r25, 0x86	; 134
 650:	86 2f       	mov	r24, r22
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	2a f0       	brmi	.+10     	; 0x662 <__floatsisf+0x6c>
 658:	9a 95       	dec	r25
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	da f7       	brpl	.-10     	; 0x658 <__floatsisf+0x62>
 662:	88 0f       	add	r24, r24
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__fp_inf>:
 66c:	97 f9       	bld	r25, 7
 66e:	9f 67       	ori	r25, 0x7F	; 127
 670:	80 e8       	ldi	r24, 0x80	; 128
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	08 95       	ret

00000678 <__fp_nan>:
 678:	9f ef       	ldi	r25, 0xFF	; 255
 67a:	80 ec       	ldi	r24, 0xC0	; 192
 67c:	08 95       	ret

0000067e <__fp_pscA>:
 67e:	00 24       	eor	r0, r0
 680:	0a 94       	dec	r0
 682:	16 16       	cp	r1, r22
 684:	17 06       	cpc	r1, r23
 686:	18 06       	cpc	r1, r24
 688:	09 06       	cpc	r0, r25
 68a:	08 95       	ret

0000068c <__fp_pscB>:
 68c:	00 24       	eor	r0, r0
 68e:	0a 94       	dec	r0
 690:	12 16       	cp	r1, r18
 692:	13 06       	cpc	r1, r19
 694:	14 06       	cpc	r1, r20
 696:	05 06       	cpc	r0, r21
 698:	08 95       	ret

0000069a <__fp_round>:
 69a:	09 2e       	mov	r0, r25
 69c:	03 94       	inc	r0
 69e:	00 0c       	add	r0, r0
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__fp_round+0xc>
 6a2:	88 23       	and	r24, r24
 6a4:	52 f0       	brmi	.+20     	; 0x6ba <__fp_round+0x20>
 6a6:	bb 0f       	add	r27, r27
 6a8:	40 f4       	brcc	.+16     	; 0x6ba <__fp_round+0x20>
 6aa:	bf 2b       	or	r27, r31
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__fp_round+0x18>
 6ae:	60 ff       	sbrs	r22, 0
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__fp_round+0x20>
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__fp_split3>:
 6bc:	57 fd       	sbrc	r21, 7
 6be:	90 58       	subi	r25, 0x80	; 128
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	59 f0       	breq	.+22     	; 0x6dc <__fp_splitA+0x10>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <__fp_splitA+0x1a>
 6ca:	47 95       	ror	r20

000006cc <__fp_splitA>:
 6cc:	88 0f       	add	r24, r24
 6ce:	97 fb       	bst	r25, 7
 6d0:	99 1f       	adc	r25, r25
 6d2:	61 f0       	breq	.+24     	; 0x6ec <__fp_splitA+0x20>
 6d4:	9f 3f       	cpi	r25, 0xFF	; 255
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <__fp_splitA+0x2a>
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret
 6dc:	12 16       	cp	r1, r18
 6de:	13 06       	cpc	r1, r19
 6e0:	14 06       	cpc	r1, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	f2 cf       	rjmp	.-28     	; 0x6ca <__fp_split3+0xe>
 6e6:	46 95       	lsr	r20
 6e8:	f1 df       	rcall	.-30     	; 0x6cc <__fp_splitA>
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <__fp_splitA+0x30>
 6ec:	16 16       	cp	r1, r22
 6ee:	17 06       	cpc	r1, r23
 6f0:	18 06       	cpc	r1, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	f1 cf       	rjmp	.-30     	; 0x6d8 <__fp_splitA+0xc>
 6f6:	86 95       	lsr	r24
 6f8:	71 05       	cpc	r23, r1
 6fa:	61 05       	cpc	r22, r1
 6fc:	08 94       	sec
 6fe:	08 95       	ret

00000700 <__fp_zero>:
 700:	e8 94       	clt

00000702 <__fp_szero>:
 702:	bb 27       	eor	r27, r27
 704:	66 27       	eor	r22, r22
 706:	77 27       	eor	r23, r23
 708:	cb 01       	movw	r24, r22
 70a:	97 f9       	bld	r25, 7
 70c:	08 95       	ret

0000070e <__mulsf3>:
 70e:	0e 94 9a 03 	call	0x734	; 0x734 <__mulsf3x>
 712:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_round>
 716:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_pscA>
 71a:	38 f0       	brcs	.+14     	; 0x72a <__mulsf3+0x1c>
 71c:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_pscB>
 720:	20 f0       	brcs	.+8      	; 0x72a <__mulsf3+0x1c>
 722:	95 23       	and	r25, r21
 724:	11 f0       	breq	.+4      	; 0x72a <__mulsf3+0x1c>
 726:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 72a:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_nan>
 72e:	11 24       	eor	r1, r1
 730:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>

00000734 <__mulsf3x>:
 734:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_split3>
 738:	70 f3       	brcs	.-36     	; 0x716 <__mulsf3+0x8>

0000073a <__mulsf3_pse>:
 73a:	95 9f       	mul	r25, r21
 73c:	c1 f3       	breq	.-16     	; 0x72e <__mulsf3+0x20>
 73e:	95 0f       	add	r25, r21
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	55 1f       	adc	r21, r21
 744:	62 9f       	mul	r22, r18
 746:	f0 01       	movw	r30, r0
 748:	72 9f       	mul	r23, r18
 74a:	bb 27       	eor	r27, r27
 74c:	f0 0d       	add	r31, r0
 74e:	b1 1d       	adc	r27, r1
 750:	63 9f       	mul	r22, r19
 752:	aa 27       	eor	r26, r26
 754:	f0 0d       	add	r31, r0
 756:	b1 1d       	adc	r27, r1
 758:	aa 1f       	adc	r26, r26
 75a:	64 9f       	mul	r22, r20
 75c:	66 27       	eor	r22, r22
 75e:	b0 0d       	add	r27, r0
 760:	a1 1d       	adc	r26, r1
 762:	66 1f       	adc	r22, r22
 764:	82 9f       	mul	r24, r18
 766:	22 27       	eor	r18, r18
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	62 1f       	adc	r22, r18
 76e:	73 9f       	mul	r23, r19
 770:	b0 0d       	add	r27, r0
 772:	a1 1d       	adc	r26, r1
 774:	62 1f       	adc	r22, r18
 776:	83 9f       	mul	r24, r19
 778:	a0 0d       	add	r26, r0
 77a:	61 1d       	adc	r22, r1
 77c:	22 1f       	adc	r18, r18
 77e:	74 9f       	mul	r23, r20
 780:	33 27       	eor	r19, r19
 782:	a0 0d       	add	r26, r0
 784:	61 1d       	adc	r22, r1
 786:	23 1f       	adc	r18, r19
 788:	84 9f       	mul	r24, r20
 78a:	60 0d       	add	r22, r0
 78c:	21 1d       	adc	r18, r1
 78e:	82 2f       	mov	r24, r18
 790:	76 2f       	mov	r23, r22
 792:	6a 2f       	mov	r22, r26
 794:	11 24       	eor	r1, r1
 796:	9f 57       	subi	r25, 0x7F	; 127
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	9a f0       	brmi	.+38     	; 0x7c2 <__mulsf3_pse+0x88>
 79c:	f1 f0       	breq	.+60     	; 0x7da <__mulsf3_pse+0xa0>
 79e:	88 23       	and	r24, r24
 7a0:	4a f0       	brmi	.+18     	; 0x7b4 <__mulsf3_pse+0x7a>
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	bb 1f       	adc	r27, r27
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__mulsf3_pse+0x64>
 7b4:	9e 3f       	cpi	r25, 0xFE	; 254
 7b6:	51 05       	cpc	r21, r1
 7b8:	80 f0       	brcs	.+32     	; 0x7da <__mulsf3_pse+0xa0>
 7ba:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 7be:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 7c2:	5f 3f       	cpi	r21, 0xFF	; 255
 7c4:	e4 f3       	brlt	.-8      	; 0x7be <__mulsf3_pse+0x84>
 7c6:	98 3e       	cpi	r25, 0xE8	; 232
 7c8:	d4 f3       	brlt	.-12     	; 0x7be <__mulsf3_pse+0x84>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f7 95       	ror	r31
 7d4:	e7 95       	ror	r30
 7d6:	9f 5f       	subi	r25, 0xFF	; 255
 7d8:	c1 f7       	brne	.-16     	; 0x7ca <__mulsf3_pse+0x90>
 7da:	fe 2b       	or	r31, r30
 7dc:	88 0f       	add	r24, r24
 7de:	91 1d       	adc	r25, r1
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__tablejump2__>:
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	05 90       	lpm	r0, Z+
 7ee:	f4 91       	lpm	r31, Z
 7f0:	e0 2d       	mov	r30, r0
 7f2:	09 94       	ijmp

000007f4 <_exit>:
 7f4:	f8 94       	cli

000007f6 <__stop_program>:
 7f6:	ff cf       	rjmp	.-2      	; 0x7f6 <__stop_program>
