
Communication_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000685  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ae  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_Init>:
 * Note				-None
 */
void UART_Init (void)
{
	// According to The Equation in Data Sheet UBRR must be Set to 12 to have a 9600 BaudRate
	UBRRH = 0;
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  6e:	8c e0       	ldi	r24, 0x0C	; 12
  70:	89 b9       	out	0x09, r24	; 9
	
	// Enable Double Speed Communication
	UCSRA = (1 << U2X);
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	8b b9       	out	0x0b, r24	; 11
	
	// Select Data Frame Width to 7-bit
	UCSRC = (1 << URSEL) | (1 << UCSZ1);
  76:	84 e8       	ldi	r24, 0x84	; 132
  78:	80 bd       	out	0x20, r24	; 32
	
	// Enable UART Receive and Transmit Pins
	UCSRB = (1 << RXEN) | (1 << TXEN);
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
  7e:	08 95       	ret

00000080 <UART_SendByte>:
	 * UDRE Flag : It is Set to 1 When only UDR Register is Empty
	 * We will Check Only The IDR Register
	 */
	
	// Polling Mechanism
	while ((UCSRA & (1<<UDRE)) == 0)						// UART Buffer Is Busy
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <UART_SendByte>
	{
		// Do Nothing / Wait Till UDR Register Is Empty
	}
	
		// Send Byte To UDR Register
		UDR = Byte;
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <UART_ReceiveByte>:
{
	// RXC : UART Receive Complete
	// This Flag Bit Is Set When There Are Unread Data In The Receive
	
	// Polling Mechanism
	while ((UCSRA & (1<<RXC)) == 0)							// Receive Register Is Busy
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <UART_ReceiveByte>
	{
		// Do Nothing / Wait Till RXC Register Is Empty
	}
	
	return UDR;
  8c:	8c b1       	in	r24, 0x0c	; 12
  8e:	08 95       	ret

00000090 <main>:
#include "ATmega32A_UART.h"

int main(void)
{
	// Initializing UART Peripheral/Module
	UART_Init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <UART_Init>
	
	// Defining Test Variable
	char testVariable = 'a';
  94:	81 e6       	ldi	r24, 0x61	; 97
    
    while (1) 
    {
		// Test : Circular Buffer To Make Sure That UART Send/Receive Functions Work Properly
		UART_SendByte(testVariable);
  96:	0e 94 40 00 	call	0x80	; 0x80 <UART_SendByte>
		// Receiving The Data Sent in The Same testVariable Then Send testVariable Again !!
		testVariable = UART_ReceiveByte();
  9a:	0e 94 44 00 	call	0x88	; 0x88 <UART_ReceiveByte>
  9e:	fb cf       	rjmp	.-10     	; 0x96 <main+0x6>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
